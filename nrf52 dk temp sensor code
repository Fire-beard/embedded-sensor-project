#include <stdio.h>
#include <stdint.h>
#include "nrf_drv_twi.h"
#include "app_util_platform.h"
#include "nrf_delay.h /*added from nrf documentation*/

#define TWI_INSTANCE_ID 0

static const nrf_drv_twi_t m_twi = NRF_DRV_TWI_INSTANCE(TWI_INSTANCE_ID;/*added from example.
*calls the NRF driver */

typedef enum {
	SENSOR_OK = 0,
	SENSOR_ERROR = 1
} sensor_status_t;

typedef struct {
	int16_t temperature;
	int32_t pressure;
} sensor_data_t; /*according to example use structs for sensor data*/

#define BMP280_ADDR 0x76
#define TEMP_MSB_REG 0xFA
#define TEMP_LSB_REG 0xFB
#define TEMP_XLSB_REG 0xFC
#define PRES_MSB_REG 0xF7
#define PRES_LSB_REG 0xF8
#define PRES_XLSB_REG 0xF9 /*added these defines from example. 
*Need to verify hex addresses are correct for nrf52 DK*/

ret_code_t err_code = error_function(NULL, NULL, NULL, NULL); /*what are these args?*/
	if (err_code != NRF_SUCCESS) {
	return SENSOR_ERROR;
	}
}
some_function( ){/*sensor okay function?*/
return SENSOR_OK;
}

sensor_status_t sensor_read(sensor_data_t *data) {
if (data == NULL return SENSOR_ERROR;
}
if sensor_status_t == /*Bad*/ 
return SENSOR_ERROR;
}
if sensor_status_t == /*Good*/
return SENSOR_OK;
}

int main(void {
    sensor_data_t data;

    APP_ERROR_CHECK(sensor_init());

    while (true) {
        if (sensor_read(&data) == SENSOR_OK {
            printf("Temperature: %d\n", data.temperature);
            printf("Pressure: %d\n", data.pressure);
        } else {
            printf("Sensor read failed\n");
        }
        nrf_delay_ms(1000);
    }
}

